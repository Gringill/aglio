doctype

mixin Badge(method)
    //- Draw a badge for a given HTTP method
    case method
        when 'GET'
            span.badge.get: i.fa.fa-arrow-down
        when 'HEAD'
            span.badge.head: i.fa.fa-info-circle
        when 'OPTIONS'
            span.badge.options: i.fa.fa-dot-circle-o
        when 'POST'
            span.badge.post: i.fa.fa-plus
        when 'PUT'
            span.badge.put: i.fa.fa-pencil
        when 'PATCH'
            span.badge.patch: i.fa.fa-pencil
        when 'DELETE'
            span.badge.delete: i.fa.fa-times
        default
            span.badge: i.fa.fa-dot-circle-o

mixin Nav()
    //- Draw a navigation bar, which includes links to individual
    //- resources and actions.
    nav
        if self.api.navItems && self.api.navItems.length
            .resource-group
                .heading
                  .chevron
                    i.open.fa.fa-angle-down
                  a(href='#top') Overview
                .collapse-content
                  ul: each item in self.api.navItems
                    li
                      a(href=item[1])!= item[0]
        each resourceGroup in self.api.resourceGroups || []
            .resource-group
                .heading
                  .chevron
                    i.open.fa.fa-angle-down
                  a(href=resourceGroup.elementLink)!= resourceGroup.name || 'Resource Group'
                .collapse-content
                  ul
                    each item in resourceGroup.navItems || []
                      li
                        a(href=item[1])!= item[0]
                    each resource in resourceGroup.resources || []
                      li
                          if !self.condenseNav || (resource.actions.length != 1)
                              a(href=resource.elementLink)!= resource.name || 'Resource'
                              ul: each action in resource.actions || []
                                  li: a(href=action.elementLink)
                                    +Badge(action.method)
                                    != action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
                          else
                              - var action = resource.actions[0]
                              a(href=action.elementLink)
                                  +Badge(action.method)
                                  != action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
        //- Link to the API hostname, e.g. api.yourcompany.com
        each meta in self.api.metadata || {}
            if meta.name == 'HOST'
                p(style="text-align: center; word-wrap: break-word;")
                    a(href=meta.value)= meta.value

mixin Parameters(params)
    //- Draw a definition list of parameter names, types, defaults,
    //- examples and descriptions.
    .title
        strong URI Parameters
        .collapse-button.show
            span.close Hide
            span.open Show
    .collapse-content
        dl.inner: each param in params || []
            dt= self.urldec(param.name)
            dd
                code= param.type || 'string'
                | &nbsp;
                if param.required
                    span.required (required)
                else
                    span (optional)
                | &nbsp;
                if param.default
                    span.text-info.default
                        strong Default:&nbsp;
                        span= param.default
                    | &nbsp;
                if param.example
                    span.text-muted.example
                        strong Example:&nbsp;
                        span= param.example
                != self.markdown(param.description)
                if param.values.length
                    p.choices
                        strong Choices:&nbsp;
                        each value in param.values
                            code= self.urldec(value.value)
                            = ' '

mixin RequestResponse(title, request, collapse)
    .title
        strong
            = title
            if request.name
                | &nbsp;&nbsp;
                code= request.name
        if collapse && request.hasContent
            .collapse-button
                span.close Hide
                span.open Show
    +RequestResponseBody(request, collapse)

mixin RequestResponseBody(request, collapse, showBlank)
    if request.hasContent || showBlank
        div(class=collapse ? 'collapse-content' : ''): .inner
            if request.description
                .description!= self.markdown(request.description)

            if Object.keys(request.headers).length
                h5 Headers
                pre: code
                    each item, index in request.headers
                        != self.highlight(item.name + ': ' + item.value, 'http')
                        if index < request.headers.length - 1
                          br
                div(style="height: 1px;")
            if request.body
                h5 Body
                pre: code
                    != self.highlight(request.body, null, ['json', 'yaml', 'xml', 'javascript'])
                div(style="height: 1px;")
            if request.schema
                h5 Schema
                pre: code
                    != self.highlight(request.schema, null, ['json', 'yaml', 'xml'])
                div(style="height: 1px;")
            if !request.hasContent
                .description.text-muted This response has no content.
                div(style="height: 1px;")

mixin Examples(resourceGroup, resource, action)
    each example in action.examples
        each request in example.requests
            +RequestResponse('Request', request, true)
        each response in example.responses
            +RequestResponse('Response', response, true)

mixin AttributeRow(element)
    div(style="height: auto; width: 172px; display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start; margin-left: 20px; margin-right: 40px; min-width: 172px; max-width: 172px;")
        div(style="width: 100%; height: auto; font-family: \"Source Code Pro\"; font-weight: 500; font-size: 13px; line-height: 13px; color: rgb(138, 147, 163); word-wrap: normal;")!= element.content.key.content
    div(style="height: auto; width: 100%; display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start;")
        div(style="width: 100%; height: auto; display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; position: relative;")
            div(style="height: auto; width: 100%; display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start;")
                div(style="width: 100%; font-family: \"Source Code Pro\"; font-size: 13px; color: rgb(138, 147, 163); line-height: 13px;")!= element.content.value.element
        div(style="width: 100%; height: auto; display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; position: relative;")
            div
                style.
                    .attributesKit p {
                        margin-bottom: 4px;
                        font-family: Source Sans Pro;
                        font-size: 14px;
                        color: #8A93A3;
                        line-height: 21px;
                        font-weight: regular;
                    }
                    .attributesKit p:last-child {
                        margin-bottom: 0px;
                    }
                    .attributesKit ul {
                        margin-left: 20px;
                    }
                    .attributesKit a {
                        color: #747E8E;
                        text-decoration: none;
                        border-bottom: 1px solid #DCE0E8;
                    }
                    .attributesKit a:hover {
                        border-bottom: none;
                    }
                div(style="font-family: \"Source Sans Pro\"; font-size: 13px; color: rgb(138, 147, 163); line-height: 150%; margin-top: 6px;")
                    if element.meta
                        p!= element.meta.description
                    else
                        p!= 'Invalid'

mixin Content()
    //- Page header and API description
    header
        h1#top!= self.api.name || 'API Documentation'

    if self.api.descriptionHtml
        != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        section.resource-group(id=resourceGroup.elementId)
            h2.group-heading
                != resourceGroup.name || 'Resource Group'
                = " "
                a.permalink(href=resourceGroup.elementLink) &para;
            if resourceGroup.descriptionHtml
                != resourceGroup.descriptionHtml

            each resource in resourceGroup.resources || []
                .resource(id=resource.elementId)
                    h3.resource-heading
                        != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                        = " "
                        a.permalink(href=resource.elementLink) &nbsp;&para;
                    if resource.description
                        != self.markdown(resource.description)

                    div(class="row resourceAttributes")
                        div(class="row attributesTitle")
                            h3(class="row attributesTitleText") Attributes
                        div(class="row attributesKit")
                            div(data-reactroot="" class="attributesKit")
                                div(style="width: 100%; height: auto; display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; position: relative; border-top-width: 1px; border-top-style: solid; border-top-color: rgb(210, 216, 222);")
                                    div(style="height: auto; width: 100%; display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-start;")
                                        div(style="width: 100%; height: auto; display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; position: relative;")
                                            div(style="width: 100%; height: auto;")
                                                div
                                                    div
                                                        if (attributes=self.api.content[self.api.resourceGroups.indexOf(resourceGroup) + resourceGroup.resources.indexOf(resource)])
                                                            if (attributes=attributes.content[0])
                                                                if (attributes=attributes.content[0])
                                                                    if (attributes=attributes.content[0])
                                                                        if ((attributes=attributes.content).length > 0)
                                                                            each element in attributes
                                                                                if (attributes.indexOf(element) == attributes.length - 1)
                                                                                    div(style="width: 100%; height: auto; display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; position: relative; padding-top: 14px; padding-bottom: 14px;")
                                                                                        +AttributeRow(element)
                                                                                else
                                                                                    div(style="width: 100%; height: auto; display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; position: relative; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(232, 235, 238); padding-top: 14px; padding-bottom: 14px;")
                                                                                        +AttributeRow(element)
                                                        else
                                                            p!= "No attributes"

                    each action in resource.actions || []
                        .action(class=action.methodLower, id=action.elementId)
                            h4.action-heading
                                .name!= action.name
                                a.method(class=action.methodLower, href=action.elementLink)
                                    = action.method
                                code.uri= self.urldec(action.uriTemplate)
                            if action.description
                                != self.markdown(action.description)

                            h4 Example URI
                            .definition
                                span.method(class=action.methodLower)= action.method
                                | &nbsp;
                                span.uri
                                  span.hostname= self.api.host
                                  != action.colorizedUriTemplate

                            //- A list of sub-sections for parameters, requests
                            //- and responses.
                            if action.parameters.length
                                +Parameters(action.parameters)
                            if action.examples
                                +Examples(resourceGroup, resource, action)

mixin ContentTriple()
    .middle
        //- Page header and API description
        header
            h1#top!= self.api.name || 'API Documentation'

    .right
        h5 API Endpoint
        a(href=self.api.host)= self.api.host
    .middle
        if self.api.descriptionHtml
            != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        .middle
            section.resource-group(id=resourceGroup.elementId)
                h2.group-heading
                    != resourceGroup.name || 'Resource Group'
                    = " "
                    a.permalink(href=resourceGroup.elementLink) &para;
                if resourceGroup.descriptionHtml
                    != resourceGroup.descriptionHtml

        each resource in resourceGroup.resources || []
            .middle
                .resource(id=resource.elementId)
                    h3.resource-heading
                        != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                        = " "
                        a.permalink(href=resource.elementLink) &para;
                    if resource.description
                        != self.markdown(resource.description)

            each action in resource.actions || []
                if action.examples
                    .right
                      .definition
                          span.method(class=action.methodLower)= action.method
                          | &nbsp;
                          span.uri
                            span.hostname= self.api.host
                            != action.colorizedUriTemplate
                      .tabs
                          if action.hasRequest
                              .example-names
                                  span Requests
                                  - var requestCount = 0
                                  each example in action.examples
                                      each request in example.requests
                                          - requestCount++
                                          span.tab-button= request.name || 'example ' + requestCount
                              each example in action.examples
                                  each request in example.requests
                                      .tab
                                          +RequestResponseBody(request, false, true)
                                          .tabs
                                              .example-names
                                                  span Responses
                                                  each response in example.responses
                                                      span.tab-button= response.name
                                              each response in example.responses
                                                  .tab
                                                      +RequestResponseBody(response, false, true)
                          else
                            each example in action.examples
                                .tabs
                                    .example-names
                                        span Responses
                                        each response in example.responses
                                            span.tab-button= response.name
                                    each response in example.responses
                                        .tab
                                            +RequestResponseBody(response, false, true)
                .middle
                    .action(class=action.methodLower, id=action.elementId)
                        h4.action-heading
                            .name!= action.name
                            a.method(class=action.methodLower, href=action.elementLink)
                                = action.method
                            code.uri= self.urldec(action.uriTemplate)
                        if action.description
                            != self.markdown(action.description)

                        //- A list of sub-sections for parameters, requests
                        //- and responses.
                        if action.parameters.length
                            +Parameters(action.parameters)

                hr.split

html
    head
        meta(charset="utf-8")
        title= self.api.name || 'API Documentation'
        link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css")
        style!= self.css
    body.preload
        a.text-muted.back-to-top(href='#top')
            i.fa.fa-toggle-up
            | &nbsp;Back to top
        div(class=self.fullWidth ? 'container-fluid' : 'container')
            .row
                block nav
                    +Nav(false)

                .content
                    block content
                        +Content('primary', false)

        p.text-muted(style="text-align: center;")
            | Generated by&nbsp;
            a.aglio(href="https://github.com/danielgtaylor/aglio") aglio
            | &nbsp;on #{self.date().format('DD MMM YYYY')}

        script: include scripts.js

        if self.livePreview
            script(src="/socket.io/socket.io.js")
            script.
                var socket = io();
                socket.on('refresh', refresh);
                socket.on('reconnect', function () {
                    socket.emit('request-refresh');
                });
